<?php
/**
 * Day
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\Clients\CalendarClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Liturgical Calendar API
 *
 * Roman Catholic liturgical calendar
 *
 * OpenAPI spec version: v0
 * Contact: jkb.pavlik@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\Clients\CalendarClient\Model;

use \ArrayAccess;
use \App\Clients\CalendarClient\ObjectSerializer;

/**
 * Day Class Doc Comment
 *
 * @category Class
 * @description Calendar entry of a liturgical day
 * @package  App\Clients\CalendarClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Day implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Day';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => '\DateTime',
        'season' => 'string',
        'season_week' => 'int',
        'celebrations' => '\App\Clients\CalendarClient\Model\Celebration[]',
        'weekday' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'date',
        'season' => null,
        'season_week' => null,
        'celebrations' => null,
        'weekday' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'season' => 'season',
        'season_week' => 'season_week',
        'celebrations' => 'celebrations',
        'weekday' => 'weekday'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'season' => 'setSeason',
        'season_week' => 'setSeasonWeek',
        'celebrations' => 'setCelebrations',
        'weekday' => 'setWeekday'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'season' => 'getSeason',
        'season_week' => 'getSeasonWeek',
        'celebrations' => 'getCelebrations',
        'weekday' => 'getWeekday'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SEASON_ADVENT = 'advent';
    const SEASON_CHRISTMAS = 'christmas';
    const SEASON_LENT = 'lent';
    const SEASON_EASTER = 'easter';
    const SEASON_ORDINARY = 'ordinary';
    const WEEKDAY_SUNDAY = 'sunday';
    const WEEKDAY_MONDAY = 'monday';
    const WEEKDAY_TUESDAY = 'tuesday';
    const WEEKDAY_WEDNESDAY = 'wednesday';
    const WEEKDAY_THURSDAY = 'thursday';
    const WEEKDAY_FRIDAY = 'friday';
    const WEEKDAY_SATURDAY = 'saturday';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeasonAllowableValues()
    {
        return [
            self::SEASON_ADVENT,
            self::SEASON_CHRISTMAS,
            self::SEASON_LENT,
            self::SEASON_EASTER,
            self::SEASON_ORDINARY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeekdayAllowableValues()
    {
        return [
            self::WEEKDAY_SUNDAY,
            self::WEEKDAY_MONDAY,
            self::WEEKDAY_TUESDAY,
            self::WEEKDAY_WEDNESDAY,
            self::WEEKDAY_THURSDAY,
            self::WEEKDAY_FRIDAY,
            self::WEEKDAY_SATURDAY,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['season'] = isset($data['season']) ? $data['season'] : null;
        $this->container['season_week'] = isset($data['season_week']) ? $data['season_week'] : null;
        $this->container['celebrations'] = isset($data['celebrations']) ? $data['celebrations'] : null;
        $this->container['weekday'] = isset($data['weekday']) ? $data['weekday'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSeasonAllowableValues();
        if (!is_null($this->container['season']) && !in_array($this->container['season'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'season', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWeekdayAllowableValues();
        if (!is_null($this->container['weekday']) && !in_array($this->container['weekday'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'weekday', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets season
     *
     * @return string
     */
    public function getSeason()
    {
        return $this->container['season'];
    }

    /**
     * Sets season
     *
     * @param string $season Liturgical season
     *
     * @return $this
     */
    public function setSeason($season)
    {
        $allowedValues = $this->getSeasonAllowableValues();
        if (!is_null($season) && !in_array($season, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'season', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['season'] = $season;

        return $this;
    }

    /**
     * Gets season_week
     *
     * @return int
     */
    public function getSeasonWeek()
    {
        return $this->container['season_week'];
    }

    /**
     * Sets season_week
     *
     * @param int $season_week Week of the season. Smallest possible value is 0 (used only in Lent, other seasons start with week 1), greatest 34.
     *
     * @return $this
     */
    public function setSeasonWeek($season_week)
    {
        $this->container['season_week'] = $season_week;

        return $this;
    }

    /**
     * Gets celebrations
     *
     * @return \App\Clients\CalendarClient\Model\Celebration[]
     */
    public function getCelebrations()
    {
        return $this->container['celebrations'];
    }

    /**
     * Sets celebrations
     *
     * @param \App\Clients\CalendarClient\Model\Celebration[] $celebrations List of one or more celebrations occurring on the day. Multiple items occur only in two cases: 1. choice between a non-privileged ferial and one or more    optional memorials 2. a privileged ferial + one or more commemorations    that can be added to the ferial office
     *
     * @return $this
     */
    public function setCelebrations($celebrations)
    {
        $this->container['celebrations'] = $celebrations;

        return $this;
    }

    /**
     * Gets weekday
     *
     * @return string
     */
    public function getWeekday()
    {
        return $this->container['weekday'];
    }

    /**
     * Sets weekday
     *
     * @param string $weekday weekday
     *
     * @return $this
     */
    public function setWeekday($weekday)
    {
        $allowedValues = $this->getWeekdayAllowableValues();
        if (!is_null($weekday) && !in_array($weekday, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'weekday', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weekday'] = $weekday;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


