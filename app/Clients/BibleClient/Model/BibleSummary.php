<?php
/**
 * BibleSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\Clients\BibleClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API.Bible
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.6.3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\Clients\BibleClient\Model;

use \ArrayAccess;
use \App\Clients\BibleClient\ObjectSerializer;

/**
 * BibleSummary Class Doc Comment
 *
 * @category Class
 * @package  App\Clients\BibleClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BibleSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BibleSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'dbl_id' => 'string',
        'abbreviation' => 'string',
        'abbreviation_local' => 'string',
        'language' => '\App\Clients\BibleClient\Model\Language',
        'countries' => '\App\Clients\BibleClient\Model\BibleSummaryCountries[]',
        'name' => 'string',
        'name_local' => 'string',
        'description' => 'string',
        'description_local' => 'string',
        'related_dbl' => 'string',
        'type' => 'string',
        'updated_at' => '\DateTime',
        'audio_bibles' => '\App\Clients\BibleClient\Model\AudioBibleSummary[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'dbl_id' => null,
        'abbreviation' => null,
        'abbreviation_local' => null,
        'language' => null,
        'countries' => null,
        'name' => null,
        'name_local' => null,
        'description' => null,
        'description_local' => null,
        'related_dbl' => null,
        'type' => null,
        'updated_at' => 'date-time',
        'audio_bibles' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'dbl_id' => 'dblId',
        'abbreviation' => 'abbreviation',
        'abbreviation_local' => 'abbreviationLocal',
        'language' => 'language',
        'countries' => 'countries',
        'name' => 'name',
        'name_local' => 'nameLocal',
        'description' => 'description',
        'description_local' => 'descriptionLocal',
        'related_dbl' => 'relatedDbl',
        'type' => 'type',
        'updated_at' => 'updatedAt',
        'audio_bibles' => 'audioBibles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'dbl_id' => 'setDblId',
        'abbreviation' => 'setAbbreviation',
        'abbreviation_local' => 'setAbbreviationLocal',
        'language' => 'setLanguage',
        'countries' => 'setCountries',
        'name' => 'setName',
        'name_local' => 'setNameLocal',
        'description' => 'setDescription',
        'description_local' => 'setDescriptionLocal',
        'related_dbl' => 'setRelatedDbl',
        'type' => 'setType',
        'updated_at' => 'setUpdatedAt',
        'audio_bibles' => 'setAudioBibles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'dbl_id' => 'getDblId',
        'abbreviation' => 'getAbbreviation',
        'abbreviation_local' => 'getAbbreviationLocal',
        'language' => 'getLanguage',
        'countries' => 'getCountries',
        'name' => 'getName',
        'name_local' => 'getNameLocal',
        'description' => 'getDescription',
        'description_local' => 'getDescriptionLocal',
        'related_dbl' => 'getRelatedDbl',
        'type' => 'getType',
        'updated_at' => 'getUpdatedAt',
        'audio_bibles' => 'getAudioBibles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['dbl_id'] = isset($data['dbl_id']) ? $data['dbl_id'] : null;
        $this->container['abbreviation'] = isset($data['abbreviation']) ? $data['abbreviation'] : null;
        $this->container['abbreviation_local'] = isset($data['abbreviation_local']) ? $data['abbreviation_local'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_local'] = isset($data['name_local']) ? $data['name_local'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_local'] = isset($data['description_local']) ? $data['description_local'] : null;
        $this->container['related_dbl'] = isset($data['related_dbl']) ? $data['related_dbl'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['audio_bibles'] = isset($data['audio_bibles']) ? $data['audio_bibles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['dbl_id'] === null) {
            $invalidProperties[] = "'dbl_id' can't be null";
        }
        if ($this->container['abbreviation'] === null) {
            $invalidProperties[] = "'abbreviation' can't be null";
        }
        if ($this->container['abbreviation_local'] === null) {
            $invalidProperties[] = "'abbreviation_local' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['countries'] === null) {
            $invalidProperties[] = "'countries' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['name_local'] === null) {
            $invalidProperties[] = "'name_local' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['description_local'] === null) {
            $invalidProperties[] = "'description_local' can't be null";
        }
        if ($this->container['related_dbl'] === null) {
            $invalidProperties[] = "'related_dbl' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets dbl_id
     *
     * @return string
     */
    public function getDblId()
    {
        return $this->container['dbl_id'];
    }

    /**
     * Sets dbl_id
     *
     * @param string $dbl_id dbl_id
     *
     * @return $this
     */
    public function setDblId($dbl_id)
    {
        $this->container['dbl_id'] = $dbl_id;

        return $this;
    }

    /**
     * Gets abbreviation
     *
     * @return string
     */
    public function getAbbreviation()
    {
        return $this->container['abbreviation'];
    }

    /**
     * Sets abbreviation
     *
     * @param string $abbreviation abbreviation
     *
     * @return $this
     */
    public function setAbbreviation($abbreviation)
    {
        $this->container['abbreviation'] = $abbreviation;

        return $this;
    }

    /**
     * Gets abbreviation_local
     *
     * @return string
     */
    public function getAbbreviationLocal()
    {
        return $this->container['abbreviation_local'];
    }

    /**
     * Sets abbreviation_local
     *
     * @param string $abbreviation_local abbreviation_local
     *
     * @return $this
     */
    public function setAbbreviationLocal($abbreviation_local)
    {
        $this->container['abbreviation_local'] = $abbreviation_local;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \App\Clients\BibleClient\Model\Language
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \App\Clients\BibleClient\Model\Language $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return \App\Clients\BibleClient\Model\BibleSummaryCountries[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param \App\Clients\BibleClient\Model\BibleSummaryCountries[] $countries countries
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_local
     *
     * @return string
     */
    public function getNameLocal()
    {
        return $this->container['name_local'];
    }

    /**
     * Sets name_local
     *
     * @param string $name_local name_local
     *
     * @return $this
     */
    public function setNameLocal($name_local)
    {
        $this->container['name_local'] = $name_local;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_local
     *
     * @return string
     */
    public function getDescriptionLocal()
    {
        return $this->container['description_local'];
    }

    /**
     * Sets description_local
     *
     * @param string $description_local description_local
     *
     * @return $this
     */
    public function setDescriptionLocal($description_local)
    {
        $this->container['description_local'] = $description_local;

        return $this;
    }

    /**
     * Gets related_dbl
     *
     * @return string
     */
    public function getRelatedDbl()
    {
        return $this->container['related_dbl'];
    }

    /**
     * Sets related_dbl
     *
     * @param string $related_dbl related_dbl
     *
     * @return $this
     */
    public function setRelatedDbl($related_dbl)
    {
        $this->container['related_dbl'] = $related_dbl;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets audio_bibles
     *
     * @return \App\Clients\BibleClient\Model\AudioBibleSummary[]
     */
    public function getAudioBibles()
    {
        return $this->container['audio_bibles'];
    }

    /**
     * Sets audio_bibles
     *
     * @param \App\Clients\BibleClient\Model\AudioBibleSummary[] $audio_bibles audio_bibles
     *
     * @return $this
     */
    public function setAudioBibles($audio_bibles)
    {
        $this->container['audio_bibles'] = $audio_bibles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


